/* automatically generated by rust-bindgen 0.55.1 */

pub const GLFW_INCLUDE_NONE: u32 = 1;
pub const GLFW_VERSION_MAJOR: u32 = 3;
pub const GLFW_VERSION_MINOR: u32 = 2;
pub const GLFW_VERSION_REVISION: u32 = 1;
pub const GLFW_TRUE: u32 = 1;
pub const GLFW_FALSE: u32 = 0;
pub const GLFW_RELEASE: u32 = 0;
pub const GLFW_PRESS: u32 = 1;
pub const GLFW_REPEAT: u32 = 2;
pub const GLFW_KEY_UNKNOWN: i32 = -1;
pub const GLFW_KEY_SPACE: u32 = 32;
pub const GLFW_KEY_APOSTROPHE: u32 = 39;
pub const GLFW_KEY_COMMA: u32 = 44;
pub const GLFW_KEY_MINUS: u32 = 45;
pub const GLFW_KEY_PERIOD: u32 = 46;
pub const GLFW_KEY_SLASH: u32 = 47;
pub const GLFW_KEY_0: u32 = 48;
pub const GLFW_KEY_1: u32 = 49;
pub const GLFW_KEY_2: u32 = 50;
pub const GLFW_KEY_3: u32 = 51;
pub const GLFW_KEY_4: u32 = 52;
pub const GLFW_KEY_5: u32 = 53;
pub const GLFW_KEY_6: u32 = 54;
pub const GLFW_KEY_7: u32 = 55;
pub const GLFW_KEY_8: u32 = 56;
pub const GLFW_KEY_9: u32 = 57;
pub const GLFW_KEY_SEMICOLON: u32 = 59;
pub const GLFW_KEY_EQUAL: u32 = 61;
pub const GLFW_KEY_A: u32 = 65;
pub const GLFW_KEY_B: u32 = 66;
pub const GLFW_KEY_C: u32 = 67;
pub const GLFW_KEY_D: u32 = 68;
pub const GLFW_KEY_E: u32 = 69;
pub const GLFW_KEY_F: u32 = 70;
pub const GLFW_KEY_G: u32 = 71;
pub const GLFW_KEY_H: u32 = 72;
pub const GLFW_KEY_I: u32 = 73;
pub const GLFW_KEY_J: u32 = 74;
pub const GLFW_KEY_K: u32 = 75;
pub const GLFW_KEY_L: u32 = 76;
pub const GLFW_KEY_M: u32 = 77;
pub const GLFW_KEY_N: u32 = 78;
pub const GLFW_KEY_O: u32 = 79;
pub const GLFW_KEY_P: u32 = 80;
pub const GLFW_KEY_Q: u32 = 81;
pub const GLFW_KEY_R: u32 = 82;
pub const GLFW_KEY_S: u32 = 83;
pub const GLFW_KEY_T: u32 = 84;
pub const GLFW_KEY_U: u32 = 85;
pub const GLFW_KEY_V: u32 = 86;
pub const GLFW_KEY_W: u32 = 87;
pub const GLFW_KEY_X: u32 = 88;
pub const GLFW_KEY_Y: u32 = 89;
pub const GLFW_KEY_Z: u32 = 90;
pub const GLFW_KEY_LEFT_BRACKET: u32 = 91;
pub const GLFW_KEY_BACKSLASH: u32 = 92;
pub const GLFW_KEY_RIGHT_BRACKET: u32 = 93;
pub const GLFW_KEY_GRAVE_ACCENT: u32 = 96;
pub const GLFW_KEY_WORLD_1: u32 = 161;
pub const GLFW_KEY_WORLD_2: u32 = 162;
pub const GLFW_KEY_ESCAPE: u32 = 256;
pub const GLFW_KEY_ENTER: u32 = 257;
pub const GLFW_KEY_TAB: u32 = 258;
pub const GLFW_KEY_BACKSPACE: u32 = 259;
pub const GLFW_KEY_INSERT: u32 = 260;
pub const GLFW_KEY_DELETE: u32 = 261;
pub const GLFW_KEY_RIGHT: u32 = 262;
pub const GLFW_KEY_LEFT: u32 = 263;
pub const GLFW_KEY_DOWN: u32 = 264;
pub const GLFW_KEY_UP: u32 = 265;
pub const GLFW_KEY_PAGE_UP: u32 = 266;
pub const GLFW_KEY_PAGE_DOWN: u32 = 267;
pub const GLFW_KEY_HOME: u32 = 268;
pub const GLFW_KEY_END: u32 = 269;
pub const GLFW_KEY_CAPS_LOCK: u32 = 280;
pub const GLFW_KEY_SCROLL_LOCK: u32 = 281;
pub const GLFW_KEY_NUM_LOCK: u32 = 282;
pub const GLFW_KEY_PRINT_SCREEN: u32 = 283;
pub const GLFW_KEY_PAUSE: u32 = 284;
pub const GLFW_KEY_F1: u32 = 290;
pub const GLFW_KEY_F2: u32 = 291;
pub const GLFW_KEY_F3: u32 = 292;
pub const GLFW_KEY_F4: u32 = 293;
pub const GLFW_KEY_F5: u32 = 294;
pub const GLFW_KEY_F6: u32 = 295;
pub const GLFW_KEY_F7: u32 = 296;
pub const GLFW_KEY_F8: u32 = 297;
pub const GLFW_KEY_F9: u32 = 298;
pub const GLFW_KEY_F10: u32 = 299;
pub const GLFW_KEY_F11: u32 = 300;
pub const GLFW_KEY_F12: u32 = 301;
pub const GLFW_KEY_F13: u32 = 302;
pub const GLFW_KEY_F14: u32 = 303;
pub const GLFW_KEY_F15: u32 = 304;
pub const GLFW_KEY_F16: u32 = 305;
pub const GLFW_KEY_F17: u32 = 306;
pub const GLFW_KEY_F18: u32 = 307;
pub const GLFW_KEY_F19: u32 = 308;
pub const GLFW_KEY_F20: u32 = 309;
pub const GLFW_KEY_F21: u32 = 310;
pub const GLFW_KEY_F22: u32 = 311;
pub const GLFW_KEY_F23: u32 = 312;
pub const GLFW_KEY_F24: u32 = 313;
pub const GLFW_KEY_F25: u32 = 314;
pub const GLFW_KEY_KP_0: u32 = 320;
pub const GLFW_KEY_KP_1: u32 = 321;
pub const GLFW_KEY_KP_2: u32 = 322;
pub const GLFW_KEY_KP_3: u32 = 323;
pub const GLFW_KEY_KP_4: u32 = 324;
pub const GLFW_KEY_KP_5: u32 = 325;
pub const GLFW_KEY_KP_6: u32 = 326;
pub const GLFW_KEY_KP_7: u32 = 327;
pub const GLFW_KEY_KP_8: u32 = 328;
pub const GLFW_KEY_KP_9: u32 = 329;
pub const GLFW_KEY_KP_DECIMAL: u32 = 330;
pub const GLFW_KEY_KP_DIVIDE: u32 = 331;
pub const GLFW_KEY_KP_MULTIPLY: u32 = 332;
pub const GLFW_KEY_KP_SUBTRACT: u32 = 333;
pub const GLFW_KEY_KP_ADD: u32 = 334;
pub const GLFW_KEY_KP_ENTER: u32 = 335;
pub const GLFW_KEY_KP_EQUAL: u32 = 336;
pub const GLFW_KEY_LEFT_SHIFT: u32 = 340;
pub const GLFW_KEY_LEFT_CONTROL: u32 = 341;
pub const GLFW_KEY_LEFT_ALT: u32 = 342;
pub const GLFW_KEY_LEFT_SUPER: u32 = 343;
pub const GLFW_KEY_RIGHT_SHIFT: u32 = 344;
pub const GLFW_KEY_RIGHT_CONTROL: u32 = 345;
pub const GLFW_KEY_RIGHT_ALT: u32 = 346;
pub const GLFW_KEY_RIGHT_SUPER: u32 = 347;
pub const GLFW_KEY_MENU: u32 = 348;
pub const GLFW_KEY_LAST: u32 = 348;
pub const GLFW_MOD_SHIFT: u32 = 1;
pub const GLFW_MOD_CONTROL: u32 = 2;
pub const GLFW_MOD_ALT: u32 = 4;
pub const GLFW_MOD_SUPER: u32 = 8;
pub const GLFW_MOUSE_BUTTON_1: u32 = 0;
pub const GLFW_MOUSE_BUTTON_2: u32 = 1;
pub const GLFW_MOUSE_BUTTON_3: u32 = 2;
pub const GLFW_MOUSE_BUTTON_4: u32 = 3;
pub const GLFW_MOUSE_BUTTON_5: u32 = 4;
pub const GLFW_MOUSE_BUTTON_6: u32 = 5;
pub const GLFW_MOUSE_BUTTON_7: u32 = 6;
pub const GLFW_MOUSE_BUTTON_8: u32 = 7;
pub const GLFW_MOUSE_BUTTON_LAST: u32 = 7;
pub const GLFW_MOUSE_BUTTON_LEFT: u32 = 0;
pub const GLFW_MOUSE_BUTTON_RIGHT: u32 = 1;
pub const GLFW_MOUSE_BUTTON_MIDDLE: u32 = 2;
pub const GLFW_JOYSTICK_1: u32 = 0;
pub const GLFW_JOYSTICK_2: u32 = 1;
pub const GLFW_JOYSTICK_3: u32 = 2;
pub const GLFW_JOYSTICK_4: u32 = 3;
pub const GLFW_JOYSTICK_5: u32 = 4;
pub const GLFW_JOYSTICK_6: u32 = 5;
pub const GLFW_JOYSTICK_7: u32 = 6;
pub const GLFW_JOYSTICK_8: u32 = 7;
pub const GLFW_JOYSTICK_9: u32 = 8;
pub const GLFW_JOYSTICK_10: u32 = 9;
pub const GLFW_JOYSTICK_11: u32 = 10;
pub const GLFW_JOYSTICK_12: u32 = 11;
pub const GLFW_JOYSTICK_13: u32 = 12;
pub const GLFW_JOYSTICK_14: u32 = 13;
pub const GLFW_JOYSTICK_15: u32 = 14;
pub const GLFW_JOYSTICK_16: u32 = 15;
pub const GLFW_JOYSTICK_LAST: u32 = 15;
pub const GLFW_NOT_INITIALIZED: u32 = 65537;
pub const GLFW_NO_CURRENT_CONTEXT: u32 = 65538;
pub const GLFW_INVALID_ENUM: u32 = 65539;
pub const GLFW_INVALID_VALUE: u32 = 65540;
pub const GLFW_OUT_OF_MEMORY: u32 = 65541;
pub const GLFW_API_UNAVAILABLE: u32 = 65542;
pub const GLFW_VERSION_UNAVAILABLE: u32 = 65543;
pub const GLFW_PLATFORM_ERROR: u32 = 65544;
pub const GLFW_FORMAT_UNAVAILABLE: u32 = 65545;
pub const GLFW_NO_WINDOW_CONTEXT: u32 = 65546;
pub const GLFW_FOCUSED: u32 = 131073;
pub const GLFW_ICONIFIED: u32 = 131074;
pub const GLFW_RESIZABLE: u32 = 131075;
pub const GLFW_VISIBLE: u32 = 131076;
pub const GLFW_DECORATED: u32 = 131077;
pub const GLFW_AUTO_ICONIFY: u32 = 131078;
pub const GLFW_FLOATING: u32 = 131079;
pub const GLFW_MAXIMIZED: u32 = 131080;
pub const GLFW_RED_BITS: u32 = 135169;
pub const GLFW_GREEN_BITS: u32 = 135170;
pub const GLFW_BLUE_BITS: u32 = 135171;
pub const GLFW_ALPHA_BITS: u32 = 135172;
pub const GLFW_DEPTH_BITS: u32 = 135173;
pub const GLFW_STENCIL_BITS: u32 = 135174;
pub const GLFW_ACCUM_RED_BITS: u32 = 135175;
pub const GLFW_ACCUM_GREEN_BITS: u32 = 135176;
pub const GLFW_ACCUM_BLUE_BITS: u32 = 135177;
pub const GLFW_ACCUM_ALPHA_BITS: u32 = 135178;
pub const GLFW_AUX_BUFFERS: u32 = 135179;
pub const GLFW_STEREO: u32 = 135180;
pub const GLFW_SAMPLES: u32 = 135181;
pub const GLFW_SRGB_CAPABLE: u32 = 135182;
pub const GLFW_REFRESH_RATE: u32 = 135183;
pub const GLFW_DOUBLEBUFFER: u32 = 135184;
pub const GLFW_CLIENT_API: u32 = 139265;
pub const GLFW_CONTEXT_VERSION_MAJOR: u32 = 139266;
pub const GLFW_CONTEXT_VERSION_MINOR: u32 = 139267;
pub const GLFW_CONTEXT_REVISION: u32 = 139268;
pub const GLFW_CONTEXT_ROBUSTNESS: u32 = 139269;
pub const GLFW_OPENGL_FORWARD_COMPAT: u32 = 139270;
pub const GLFW_OPENGL_DEBUG_CONTEXT: u32 = 139271;
pub const GLFW_OPENGL_PROFILE: u32 = 139272;
pub const GLFW_CONTEXT_RELEASE_BEHAVIOR: u32 = 139273;
pub const GLFW_CONTEXT_NO_ERROR: u32 = 139274;
pub const GLFW_CONTEXT_CREATION_API: u32 = 139275;
pub const GLFW_NO_API: u32 = 0;
pub const GLFW_OPENGL_API: u32 = 196609;
pub const GLFW_OPENGL_ES_API: u32 = 196610;
pub const GLFW_NO_ROBUSTNESS: u32 = 0;
pub const GLFW_NO_RESET_NOTIFICATION: u32 = 200705;
pub const GLFW_LOSE_CONTEXT_ON_RESET: u32 = 200706;
pub const GLFW_OPENGL_ANY_PROFILE: u32 = 0;
pub const GLFW_OPENGL_CORE_PROFILE: u32 = 204801;
pub const GLFW_OPENGL_COMPAT_PROFILE: u32 = 204802;
pub const GLFW_CURSOR: u32 = 208897;
pub const GLFW_STICKY_KEYS: u32 = 208898;
pub const GLFW_STICKY_MOUSE_BUTTONS: u32 = 208899;
pub const GLFW_CURSOR_NORMAL: u32 = 212993;
pub const GLFW_CURSOR_HIDDEN: u32 = 212994;
pub const GLFW_CURSOR_DISABLED: u32 = 212995;
pub const GLFW_ANY_RELEASE_BEHAVIOR: u32 = 0;
pub const GLFW_RELEASE_BEHAVIOR_FLUSH: u32 = 217089;
pub const GLFW_RELEASE_BEHAVIOR_NONE: u32 = 217090;
pub const GLFW_NATIVE_CONTEXT_API: u32 = 221185;
pub const GLFW_EGL_CONTEXT_API: u32 = 221186;
pub const GLFW_ARROW_CURSOR: u32 = 221185;
pub const GLFW_IBEAM_CURSOR: u32 = 221186;
pub const GLFW_CROSSHAIR_CURSOR: u32 = 221187;
pub const GLFW_HAND_CURSOR: u32 = 221188;
pub const GLFW_HRESIZE_CURSOR: u32 = 221189;
pub const GLFW_VRESIZE_CURSOR: u32 = 221190;
pub const GLFW_CONNECTED: u32 = 262145;
pub const GLFW_DISCONNECTED: u32 = 262146;
pub const GLFW_DONT_CARE: i32 = -1;
pub type size_t = rs_ctypes::c_ulong;
pub type wchar_t = rs_ctypes::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: rs_ctypes::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = rs_ctypes::c_longlong;
pub type uintmax_t = rs_ctypes::c_ulonglong;
#[doc = " @brief Client API function pointer type."]
#[doc = ""]
#[doc = "  Generic function pointer used for returning client API function pointers"]
#[doc = "  without forcing a cast from a regular pointer."]
#[doc = ""]
#[doc = "  @sa @ref context_glext"]
#[doc = "  @sa glfwGetProcAddress"]
#[doc = ""]
#[doc = "  @since Added in version 3.0."]
#[doc = ""]
#[doc = "  @ingroup context"]
pub type GLFWglproc = ::core::option::Option<unsafe extern "C" fn()>;
#[doc = " @brief Vulkan API function pointer type."]
#[doc = ""]
#[doc = "  Generic function pointer used for returning Vulkan API function pointers"]
#[doc = "  without forcing a cast from a regular pointer."]
#[doc = ""]
#[doc = "  @sa @ref vulkan_proc"]
#[doc = "  @sa glfwGetInstanceProcAddress"]
#[doc = ""]
#[doc = "  @since Added in version 3.2."]
#[doc = ""]
#[doc = "  @ingroup vulkan"]
pub type GLFWvkproc = ::core::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWmonitor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWwindow {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWcursor {
    _unused: [u8; 0],
}
#[doc = " @brief The function signature for error callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for error callback functions."]
#[doc = ""]
#[doc = "  @param[in] error An [error code](@ref errors)."]
#[doc = "  @param[in] description A UTF-8 encoded string describing the error."]
#[doc = ""]
#[doc = "  @sa @ref error_handling"]
#[doc = "  @sa glfwSetErrorCallback"]
#[doc = ""]
#[doc = "  @since Added in version 3.0."]
#[doc = ""]
#[doc = "  @ingroup init"]
pub type GLFWerrorfun = ::core::option::Option<
    unsafe extern "C" fn(arg1: rs_ctypes::c_int, arg2: *const rs_ctypes::c_char),
>;
#[doc = " @brief The function signature for window position callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for window position callback functions."]
#[doc = ""]
#[doc = "  @param[in] window The window that was moved."]
#[doc = "  @param[in] xpos The new x-coordinate, in screen coordinates, of the"]
#[doc = "  upper-left corner of the client area of the window."]
#[doc = "  @param[in] ypos The new y-coordinate, in screen coordinates, of the"]
#[doc = "  upper-left corner of the client area of the window."]
#[doc = ""]
#[doc = "  @sa @ref window_pos"]
#[doc = "  @sa glfwSetWindowPosCallback"]
#[doc = ""]
#[doc = "  @since Added in version 3.0."]
#[doc = ""]
#[doc = "  @ingroup window"]
pub type GLFWwindowposfun = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut GLFWwindow, arg2: rs_ctypes::c_int, arg3: rs_ctypes::c_int),
>;
#[doc = " @brief The function signature for window resize callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for window size callback functions."]
#[doc = ""]
#[doc = "  @param[in] window The window that was resized."]
#[doc = "  @param[in] width The new width, in screen coordinates, of the window."]
#[doc = "  @param[in] height The new height, in screen coordinates, of the window."]
#[doc = ""]
#[doc = "  @sa @ref window_size"]
#[doc = "  @sa glfwSetWindowSizeCallback"]
#[doc = ""]
#[doc = "  @since Added in version 1.0."]
#[doc = "  @glfw3 Added window handle parameter."]
#[doc = ""]
#[doc = "  @ingroup window"]
pub type GLFWwindowsizefun = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut GLFWwindow, arg2: rs_ctypes::c_int, arg3: rs_ctypes::c_int),
>;
#[doc = " @brief The function signature for window close callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for window close callback functions."]
#[doc = ""]
#[doc = "  @param[in] window The window that the user attempted to close."]
#[doc = ""]
#[doc = "  @sa @ref window_close"]
#[doc = "  @sa glfwSetWindowCloseCallback"]
#[doc = ""]
#[doc = "  @since Added in version 2.5."]
#[doc = "  @glfw3 Added window handle parameter."]
#[doc = ""]
#[doc = "  @ingroup window"]
pub type GLFWwindowclosefun = ::core::option::Option<unsafe extern "C" fn(arg1: *mut GLFWwindow)>;
#[doc = " @brief The function signature for window content refresh callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for window refresh callback functions."]
#[doc = ""]
#[doc = "  @param[in] window The window whose content needs to be refreshed."]
#[doc = ""]
#[doc = "  @sa @ref window_refresh"]
#[doc = "  @sa glfwSetWindowRefreshCallback"]
#[doc = ""]
#[doc = "  @since Added in version 2.5."]
#[doc = "  @glfw3 Added window handle parameter."]
#[doc = ""]
#[doc = "  @ingroup window"]
pub type GLFWwindowrefreshfun = ::core::option::Option<unsafe extern "C" fn(arg1: *mut GLFWwindow)>;
#[doc = " @brief The function signature for window focus/defocus callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for window focus callback functions."]
#[doc = ""]
#[doc = "  @param[in] window The window that gained or lost input focus."]
#[doc = "  @param[in] focused `GLFW_TRUE` if the window was given input focus, or"]
#[doc = "  `GLFW_FALSE` if it lost it."]
#[doc = ""]
#[doc = "  @sa @ref window_focus"]
#[doc = "  @sa glfwSetWindowFocusCallback"]
#[doc = ""]
#[doc = "  @since Added in version 3.0."]
#[doc = ""]
#[doc = "  @ingroup window"]
pub type GLFWwindowfocusfun =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut GLFWwindow, arg2: rs_ctypes::c_int)>;
#[doc = " @brief The function signature for window iconify/restore callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for window iconify/restore callback"]
#[doc = "  functions."]
#[doc = ""]
#[doc = "  @param[in] window The window that was iconified or restored."]
#[doc = "  @param[in] iconified `GLFW_TRUE` if the window was iconified, or"]
#[doc = "  `GLFW_FALSE` if it was restored."]
#[doc = ""]
#[doc = "  @sa @ref window_iconify"]
#[doc = "  @sa glfwSetWindowIconifyCallback"]
#[doc = ""]
#[doc = "  @since Added in version 3.0."]
#[doc = ""]
#[doc = "  @ingroup window"]
pub type GLFWwindowiconifyfun =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut GLFWwindow, arg2: rs_ctypes::c_int)>;
#[doc = " @brief The function signature for framebuffer resize callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for framebuffer resize callback"]
#[doc = "  functions."]
#[doc = ""]
#[doc = "  @param[in] window The window whose framebuffer was resized."]
#[doc = "  @param[in] width The new width, in pixels, of the framebuffer."]
#[doc = "  @param[in] height The new height, in pixels, of the framebuffer."]
#[doc = ""]
#[doc = "  @sa @ref window_fbsize"]
#[doc = "  @sa glfwSetFramebufferSizeCallback"]
#[doc = ""]
#[doc = "  @since Added in version 3.0."]
#[doc = ""]
#[doc = "  @ingroup window"]
pub type GLFWframebuffersizefun = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut GLFWwindow, arg2: rs_ctypes::c_int, arg3: rs_ctypes::c_int),
>;
#[doc = " @brief The function signature for mouse button callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for mouse button callback functions."]
#[doc = ""]
#[doc = "  @param[in] window The window that received the event."]
#[doc = "  @param[in] button The [mouse button](@ref buttons) that was pressed or"]
#[doc = "  released."]
#[doc = "  @param[in] action One of `GLFW_PRESS` or `GLFW_RELEASE`."]
#[doc = "  @param[in] mods Bit field describing which [modifier keys](@ref mods) were"]
#[doc = "  held down."]
#[doc = ""]
#[doc = "  @sa @ref input_mouse_button"]
#[doc = "  @sa glfwSetMouseButtonCallback"]
#[doc = ""]
#[doc = "  @since Added in version 1.0."]
#[doc = "  @glfw3 Added window handle and modifier mask parameters."]
#[doc = ""]
#[doc = "  @ingroup input"]
pub type GLFWmousebuttonfun = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut GLFWwindow,
        arg2: rs_ctypes::c_int,
        arg3: rs_ctypes::c_int,
        arg4: rs_ctypes::c_int,
    ),
>;
#[doc = " @brief The function signature for cursor position callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for cursor position callback functions."]
#[doc = ""]
#[doc = "  @param[in] window The window that received the event."]
#[doc = "  @param[in] xpos The new cursor x-coordinate, relative to the left edge of"]
#[doc = "  the client area."]
#[doc = "  @param[in] ypos The new cursor y-coordinate, relative to the top edge of the"]
#[doc = "  client area."]
#[doc = ""]
#[doc = "  @sa @ref cursor_pos"]
#[doc = "  @sa glfwSetCursorPosCallback"]
#[doc = ""]
#[doc = "  @since Added in version 3.0.  Replaces `GLFWmouseposfun`."]
#[doc = ""]
#[doc = "  @ingroup input"]
pub type GLFWcursorposfun =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut GLFWwindow, arg2: f64, arg3: f64)>;
#[doc = " @brief The function signature for cursor enter/leave callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for cursor enter/leave callback functions."]
#[doc = ""]
#[doc = "  @param[in] window The window that received the event."]
#[doc = "  @param[in] entered `GLFW_TRUE` if the cursor entered the window's client"]
#[doc = "  area, or `GLFW_FALSE` if it left it."]
#[doc = ""]
#[doc = "  @sa @ref cursor_enter"]
#[doc = "  @sa glfwSetCursorEnterCallback"]
#[doc = ""]
#[doc = "  @since Added in version 3.0."]
#[doc = ""]
#[doc = "  @ingroup input"]
pub type GLFWcursorenterfun =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut GLFWwindow, arg2: rs_ctypes::c_int)>;
#[doc = " @brief The function signature for scroll callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for scroll callback functions."]
#[doc = ""]
#[doc = "  @param[in] window The window that received the event."]
#[doc = "  @param[in] xoffset The scroll offset along the x-axis."]
#[doc = "  @param[in] yoffset The scroll offset along the y-axis."]
#[doc = ""]
#[doc = "  @sa @ref scrolling"]
#[doc = "  @sa glfwSetScrollCallback"]
#[doc = ""]
#[doc = "  @since Added in version 3.0.  Replaces `GLFWmousewheelfun`."]
#[doc = ""]
#[doc = "  @ingroup input"]
pub type GLFWscrollfun =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut GLFWwindow, arg2: f64, arg3: f64)>;
#[doc = " @brief The function signature for keyboard key callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for keyboard key callback functions."]
#[doc = ""]
#[doc = "  @param[in] window The window that received the event."]
#[doc = "  @param[in] key The [keyboard key](@ref keys) that was pressed or released."]
#[doc = "  @param[in] scancode The system-specific scancode of the key."]
#[doc = "  @param[in] action `GLFW_PRESS`, `GLFW_RELEASE` or `GLFW_REPEAT`."]
#[doc = "  @param[in] mods Bit field describing which [modifier keys](@ref mods) were"]
#[doc = "  held down."]
#[doc = ""]
#[doc = "  @sa @ref input_key"]
#[doc = "  @sa glfwSetKeyCallback"]
#[doc = ""]
#[doc = "  @since Added in version 1.0."]
#[doc = "  @glfw3 Added window handle, scancode and modifier mask parameters."]
#[doc = ""]
#[doc = "  @ingroup input"]
pub type GLFWkeyfun = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut GLFWwindow,
        arg2: rs_ctypes::c_int,
        arg3: rs_ctypes::c_int,
        arg4: rs_ctypes::c_int,
        arg5: rs_ctypes::c_int,
    ),
>;
#[doc = " @brief The function signature for Unicode character callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for Unicode character callback functions."]
#[doc = ""]
#[doc = "  @param[in] window The window that received the event."]
#[doc = "  @param[in] codepoint The Unicode code point of the character."]
#[doc = ""]
#[doc = "  @sa @ref input_char"]
#[doc = "  @sa glfwSetCharCallback"]
#[doc = ""]
#[doc = "  @since Added in version 2.4."]
#[doc = "  @glfw3 Added window handle parameter."]
#[doc = ""]
#[doc = "  @ingroup input"]
pub type GLFWcharfun =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut GLFWwindow, arg2: rs_ctypes::c_uint)>;
#[doc = " @brief The function signature for Unicode character with modifiers"]
#[doc = "  callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for Unicode character with modifiers callback"]
#[doc = "  functions.  It is called for each input character, regardless of what"]
#[doc = "  modifier keys are held down."]
#[doc = ""]
#[doc = "  @param[in] window The window that received the event."]
#[doc = "  @param[in] codepoint The Unicode code point of the character."]
#[doc = "  @param[in] mods Bit field describing which [modifier keys](@ref mods) were"]
#[doc = "  held down."]
#[doc = ""]
#[doc = "  @sa @ref input_char"]
#[doc = "  @sa glfwSetCharModsCallback"]
#[doc = ""]
#[doc = "  @since Added in version 3.1."]
#[doc = ""]
#[doc = "  @ingroup input"]
pub type GLFWcharmodsfun = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut GLFWwindow, arg2: rs_ctypes::c_uint, arg3: rs_ctypes::c_int),
>;
#[doc = " @brief The function signature for file drop callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for file drop callbacks."]
#[doc = ""]
#[doc = "  @param[in] window The window that received the event."]
#[doc = "  @param[in] count The number of dropped files."]
#[doc = "  @param[in] paths The UTF-8 encoded file and/or directory path names."]
#[doc = ""]
#[doc = "  @sa @ref path_drop"]
#[doc = "  @sa glfwSetDropCallback"]
#[doc = ""]
#[doc = "  @since Added in version 3.1."]
#[doc = ""]
#[doc = "  @ingroup input"]
pub type GLFWdropfun = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut GLFWwindow,
        arg2: rs_ctypes::c_int,
        arg3: *mut *const rs_ctypes::c_char,
    ),
>;
#[doc = " @brief The function signature for monitor configuration callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for monitor configuration callback functions."]
#[doc = ""]
#[doc = "  @param[in] monitor The monitor that was connected or disconnected."]
#[doc = "  @param[in] event One of `GLFW_CONNECTED` or `GLFW_DISCONNECTED`."]
#[doc = ""]
#[doc = "  @sa @ref monitor_event"]
#[doc = "  @sa glfwSetMonitorCallback"]
#[doc = ""]
#[doc = "  @since Added in version 3.0."]
#[doc = ""]
#[doc = "  @ingroup monitor"]
pub type GLFWmonitorfun =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut GLFWmonitor, arg2: rs_ctypes::c_int)>;
#[doc = " @brief The function signature for joystick configuration callbacks."]
#[doc = ""]
#[doc = "  This is the function signature for joystick configuration callback"]
#[doc = "  functions."]
#[doc = ""]
#[doc = "  @param[in] joy The joystick that was connected or disconnected."]
#[doc = "  @param[in] event One of `GLFW_CONNECTED` or `GLFW_DISCONNECTED`."]
#[doc = ""]
#[doc = "  @sa @ref joystick_event"]
#[doc = "  @sa glfwSetJoystickCallback"]
#[doc = ""]
#[doc = "  @since Added in version 3.2."]
#[doc = ""]
#[doc = "  @ingroup input"]
pub type GLFWjoystickfun =
    ::core::option::Option<unsafe extern "C" fn(arg1: rs_ctypes::c_int, arg2: rs_ctypes::c_int)>;
#[doc = " @brief Video mode type."]
#[doc = ""]
#[doc = "  This describes a single video mode."]
#[doc = ""]
#[doc = "  @sa @ref monitor_modes"]
#[doc = "  @sa glfwGetVideoMode glfwGetVideoModes"]
#[doc = ""]
#[doc = "  @since Added in version 1.0."]
#[doc = "  @glfw3 Added refresh rate member."]
#[doc = ""]
#[doc = "  @ingroup monitor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWvidmode {
    #[doc = " The width, in screen coordinates, of the video mode."]
    pub width: rs_ctypes::c_int,
    #[doc = " The height, in screen coordinates, of the video mode."]
    pub height: rs_ctypes::c_int,
    #[doc = " The bit depth of the red channel of the video mode."]
    pub redBits: rs_ctypes::c_int,
    #[doc = " The bit depth of the green channel of the video mode."]
    pub greenBits: rs_ctypes::c_int,
    #[doc = " The bit depth of the blue channel of the video mode."]
    pub blueBits: rs_ctypes::c_int,
    #[doc = " The refresh rate, in Hz, of the video mode."]
    pub refreshRate: rs_ctypes::c_int,
}
#[test]
fn bindgen_test_layout_GLFWvidmode() {
    assert_eq!(
        ::core::mem::size_of::<GLFWvidmode>(),
        24usize,
        concat!("Size of: ", stringify!(GLFWvidmode))
    );
    assert_eq!(
        ::core::mem::align_of::<GLFWvidmode>(),
        4usize,
        concat!("Alignment of ", stringify!(GLFWvidmode))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GLFWvidmode>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GLFWvidmode>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GLFWvidmode>())).redBits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(redBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GLFWvidmode>())).greenBits as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(greenBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GLFWvidmode>())).blueBits as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(blueBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GLFWvidmode>())).refreshRate as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(refreshRate)
        )
    );
}
#[doc = " @brief Gamma ramp."]
#[doc = ""]
#[doc = "  This describes the gamma ramp for a monitor."]
#[doc = ""]
#[doc = "  @sa @ref monitor_gamma"]
#[doc = "  @sa glfwGetGammaRamp glfwSetGammaRamp"]
#[doc = ""]
#[doc = "  @since Added in version 3.0."]
#[doc = ""]
#[doc = "  @ingroup monitor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWgammaramp {
    #[doc = " An array of value describing the response of the red channel."]
    pub red: *mut rs_ctypes::c_ushort,
    #[doc = " An array of value describing the response of the green channel."]
    pub green: *mut rs_ctypes::c_ushort,
    #[doc = " An array of value describing the response of the blue channel."]
    pub blue: *mut rs_ctypes::c_ushort,
    #[doc = " The number of elements in each array."]
    pub size: rs_ctypes::c_uint,
}
#[test]
fn bindgen_test_layout_GLFWgammaramp() {
    assert_eq!(
        ::core::mem::size_of::<GLFWgammaramp>(),
        16usize,
        concat!("Size of: ", stringify!(GLFWgammaramp))
    );
    assert_eq!(
        ::core::mem::align_of::<GLFWgammaramp>(),
        4usize,
        concat!("Alignment of ", stringify!(GLFWgammaramp))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GLFWgammaramp>())).red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgammaramp),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GLFWgammaramp>())).green as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgammaramp),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GLFWgammaramp>())).blue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgammaramp),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GLFWgammaramp>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgammaramp),
            "::",
            stringify!(size)
        )
    );
}
#[doc = " @brief Image data."]
#[doc = ""]
#[doc = "  @sa @ref cursor_custom"]
#[doc = "  @sa @ref window_icon"]
#[doc = ""]
#[doc = "  @since Added in version 2.1."]
#[doc = "  @glfw3 Removed format and bytes-per-pixel members."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWimage {
    #[doc = " The width, in pixels, of this image."]
    pub width: rs_ctypes::c_int,
    #[doc = " The height, in pixels, of this image."]
    pub height: rs_ctypes::c_int,
    #[doc = " The pixel data of this image, arranged left-to-right, top-to-bottom."]
    pub pixels: *mut rs_ctypes::c_uchar,
}
#[test]
fn bindgen_test_layout_GLFWimage() {
    assert_eq!(
        ::core::mem::size_of::<GLFWimage>(),
        12usize,
        concat!("Size of: ", stringify!(GLFWimage))
    );
    assert_eq!(
        ::core::mem::align_of::<GLFWimage>(),
        4usize,
        concat!("Alignment of ", stringify!(GLFWimage))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GLFWimage>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWimage),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GLFWimage>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWimage),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GLFWimage>())).pixels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWimage),
            "::",
            stringify!(pixels)
        )
    );
}
